import json
from datetime import datetime
from typing import Any, Dict, List

from core_agent import AGEAN
from src.llm import get_llm
from src.prompts_config import CTIPrompts
from src.system_prompts import incident_prompts
from langchain.agents import AgentExecutor


class IncidentReportingAgent(AGEAN):
"""
Loading in Agent specific prompts and methods.
AGEAN is the suplerclass and has the core methods.
"""

    def __init__(self, 
                 cti = CTIPrompts(),
                 name: str = "IncidentReporter", 
                 llm: str = get_llm(), 
                 verbose: bool = True, 
                 streaming: bool = False, 
                 incident_prompts: CTIPrompts = cti.incident_prompts._get_agent_prompts
                 ):
        self.cti = cti
        self.name = name
        self.llm = llm
        self.verbose = verbose
        self.streaming = streaming
        self.incident_promtps = incident_prompts
        self.accumulate_chat_history = accumulate_chat_history        
        """
        Initializes the IncidentReportingAgent with specific LLM, prompts, and behavior settings.
        """
        super().__init__(name=name, accumulate_chat_history=accumulate_chat_history, 
                         verbose=verbose, streaming=streaming)
        self.llm = llm
        self.__verbose = verbose

    # Core and critical methods for Incident Reporting Agent
    

    def _get_executor(self, verbose: bool) -> "AgentExecutor":
        """
        Initialize and return an AgentExecutor for the incident reporting agent.

        Args:
            verbose (bool): Whether the executor should operate in verbose mode.
        
        Returns:
            AgentExecutor: Executor that handles incident reporting processes.
        """
        executor = AgentExecutor(agent=self.llm, tools=self._get_tools(), verbose=verbose)
        return executor

    def _receive_incident_data(self, data: Dict[str, Any]):
        """
        Receives and processes incident data. The input should be a dictionary format.

        Args:
            data (Dict[str, Any]): Incoming data representing the incident details.
        
        Example:
            {
                "incident_id": "INC12345",
                "severity": "High",
                "description": "Unauthorized access detected",
                "source_ip": "192.168.1.10",
                "destination_ip": "10.0.0.5",
                "timestamp": "2024-01-01T12:34:56Z"
            }
        """
        self.incident_data = data
        if self.__verbose:
            print(f"Received incident data: {json.dumps(self.incident_data, indent=2)}")

    def _to_json(self, data: Dict[str, Any]) -> str:
        """
        Converts incident data to JSON format for further processing or storage.

        Args:
            data (Dict[str, Any]): A dictionary containing the incident information.
        
        Returns:
            str: A JSON-formatted string of the input data.
        """
        return json.dumps(data, indent=4)

    def analyze_incident(self) -> str:
        """
        Analyzes the received incident data using the LLM and generates insights.

        This method processes the incident data through the LLM to provide recommendations for actions.

        Returns:
            str: Insights or recommendations generated by the LLM for the incident.
        """
        if not hasattr(self, 'incident_data'):
            raise ValueError("No incident data has been received for analysis.")
        
        # Example: use LLM to analyze the incident data
        query = f"Analyze this incident: {self._to_json(self.incident_data)}"
        response = self.invoke(query)
        
        if self.__verbose:
            print(f"Incident analysis result: {response}")
        
        return response

    def escalate_incident(self) -> str:
        """
        Escalates the incident based on its severity.

        Returns:
            str: A message indicating the escalation result.
        """
        if not hasattr(self, 'incident_data'):
            raise ValueError("No incident data available for escalation.")
        
        severity = self.incident_data.get("severity", "Low")
        if severity in ["High", "Critical"]:
            # Simulate escalation process
            escalation_result = f"Incident {self.incident_data.get('incident_id')} has been escalated to the SOC team."
        else:
            escalation_result = f"Incident {self.incident_data.get('incident_id')} does not require escalation."
        
        if self.__verbose:
            print(escalation_result)
        
        return escalation_result

    def generate_report(self) -> str:
        """
        Generates an incident report based on the received and analyzed data.

        Returns:
            str: A JSON string representing the final incident report.
        """
        if not hasattr(self, 'incident_data'):
            raise ValueError("No incident data to generate a report from.")
        
        # Example report structure
        analysis = self.analyze_incident()
        report = {
            "report_time": datetime.utcnow().isoformat(),
            "incident_id": self.incident_data.get("incident_id"),
            "severity": self.incident_data.get("severity"),
            "description": self.incident_data.get("description"),
            "analysis": analysis,
            "escalation": self.escalate_incident()
        }
        
        report_json = self._to_json(report)
        if self.__verbose:
            print(f"Generated incident report: {report_json}")
        
        return report_json

    def _get_tools(self) -> List:
        """
        Retrieve tools specific to incident reporting, such as log analyzers or ticketing systems.

        Returns:
            List: A list of tools that can be used by the agent.
        """
        # Example of defining tools (use your actual toolset integration)
        return [
            {"name": "Incident Log Analyzer", "description": "Analyze logs related to the incident."},
            {"name": "Ticketing System", "description": "Create tickets for escalated incidents."}
        ]

    def log_event(self, log_data: Dict[str, Any]):
        """
        Logs the incident for future reference or auditing.

        Args:
            log_data (Dict[str, Any]): The log data to be saved.
        """
        log_json = self._to_json(log_data)
        if self.__verbose:
            print(f"Logging incident: {log_json}")
        # Simulate logging here (e.g., save to file, send to logging system, etc.)
        with open("incident_log.json", "a") as f:
            f.write(f"{log_json}\n")



