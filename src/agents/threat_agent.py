import asyncio
import json
from datetime import datetime
from typing import Any, Dict, List

from langchain.agents import AgentExecutor

from core_agent import AGEAN
from src.llm import get_llm
from src.prompts_config import CTIPrompts, _get_prompts_agent
from src.agents import threat_agent


class ThreatDetectionAgent(AGEAN):
    cti = CTIPrompts()
    def __init__(self, 
                 name: str = "CTIA", 
                 llm: str = get_llm(), 
                 verbose: bool = True, 
                 streaming: bool = False, 
                 prompts: CTIPrompts = cti.threat_prompts._get_prompts(), 
                 accumulate_chat_history: bool = True):
        """
        Initializes the ThreatDetectionAgent with specific LLM, prompts, and behavior settings.
        """
        super().__init__(name=name, accumulate_chat_history=accumulate_chat_history, 
                         verbose=verbose, streaming=streaming)
        self.llm = llm
        self.prompts = prompts
        self.__verbose = verbose

    # Core and critical methods for Threat Detection Agent

    def _get_executor(self, verbose: bool) -> AgentExecutor:
        """
        Initialize and return an AgentExecutor for the threat detection agent.

        Args:
            verbose (bool): Whether the executor should operate in verbose mode.
        
        Returns:
            AgentExecutor: Executor that handles threat detection processes.
        """
        executor = AgentExecutor(agent=self.llm, tools=self._get_tools(), verbose=verbose)
        return executor

    def _receive_data(self, data: Dict[str, Any]):
        """
        Receives and processes threat detection data. The input should be a JSON object.

        Args:
            data (Dict[str, Any]): Incoming data in a dictionary format representing threat intelligence or log data.
        
        Example:
            {
                "source_ip": "192.168.1.10",
                "destination_ip": "10.0.0.5",
                "event": "Login attempt",
                "timestamp": "2024-01-01T12:34:56Z"
            }
        """
        self.data = data
        if self.__verbose:
            print(f"Received data: {json.dumps(self.data, indent=2)}")

    def _to_json(self, data: Dict[str, Any]) -> str:
        """
        Converts threat detection data to JSON format for further analysis.

        Args:
            data (Dict[str, Any]): A dictionary containing the event or threat detection information.
        
        Returns:
            str: A JSON-formatted string of the input data.
        """
        return json.dumps(data, indent=4)

    def analyze_threat_data(self) -> str:
        """
        Analyze the received threat detection data using the LLM and generate insights.

        This method processes the data through the LLM to detect anomalies or threats.

        Returns:
            str: Insights or analysis results generated by the LLM.
        """
        if not hasattr(self, 'data'):
            raise ValueError("No data has been received for analysis.")
        
        # Example: use LLM to analyze the event or log data
        query = f"Analyze this network event: {self._to_json(self.data)}"
        response = self.invoke(query)
        
        if self.__verbose:
            print(f"Threat analysis result: {response}")
        
        return response

    def generate_report(self) -> str:
        """
        Generates a threat detection report based on the analyzed data.

        Returns:
            str: A JSON string representing the final report.
        """
        if not hasattr(self, 'data'):
            raise ValueError("No data to generate a report from.")
        
        # Example report format
        report = {
            "analysis_time": datetime.utcnow().isoformat(),
            "source_ip": self.data.get("source_ip"),
            "destination_ip": self.data.get("destination_ip"),
            "event": self.data.get("event"),
            "analysis": self.analyze_threat_data(),
            "severity": "High"  # You can implement dynamic severity assignment based on analysis
        }
        
        report_json = self._to_json(report)
        if self.__verbose:
            print(f"Generated report: {report_json}")
        
        return report_json

    def _get_tools(self) -> List:
        """
        Retrieve tools specific to threat detection, such as IDS or log analyzers.

        Returns:
            List: A list of tools that can be used by the agent.
        """
        # Example of defining tools (use your actual toolset integration)
        return [
            {"name": "IDS", "description": "Intrusion Detection System"},
            {"name": "LogAnalyzer", "description": "Log Analysis Utility"}
        ]

    def log_event(self, log_data: Dict[str, Any]):
        """
        Logs a detected event in a predefined format, such as JSON or ECS-compatible fields.

        Args:
            log_data (Dict[str, Any]): Event data to log.
        """
        # In practice, this could write to a file, database, or logging system
        log_json = self._to_json(log_data)
        if self.__verbose:
            print(f"Logging event: {log_json}")
        # Simulate logging here (e.g., save to file, send to logging system, etc.)
        # For example: save to a log file
        with open("threat_detection_log.json", "a") as f:
            f.write(f"{log_json}\n")
